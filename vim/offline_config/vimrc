"""""""""""""""""""""""""""""""""""""
"==> General
""""""""""""""""""""""""""""""""""""
"set how many lines of history VIM has to remember
set history=700

" turn off VI compatible mode
set nocompatible

" 开启文件类型侦测(Enable filetype detection)
filetype on
"根据侦测到的文件类型加载对应的插件(Enable loading the plugin files for specific file types)
filetype plugin on
"Apply indent for specific file types
filetype indent on

" set to auto read when a file is changed from the outside
set autoread

set wrap
"" 退格键设置
" indent: 如果用了:set indent,:set ai 等自动缩进，想用退格键将字段缩进的删掉，必须设置这个选项。否则不响应。
" eol:如果插入模式下在行开头，想通过退格键合并两行，需要设置eol。
" start：要想删除此次插入前的输入，需设置这个。
set backspace=indent,eol,start

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"==> 快捷键(shortcut key)
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" define <leader>
let mapleader = ";"

"Fast Saving
nmap <leader>w :w!<cr>

"Let the vimrc config take effect right away when saving
autocmd BufWritePost $MYVIMRC source $MYVIMRC

""""""""""""""""""""""""""""""""""""""""""""
"==> vim user interface
""""""""""""""""""""""""""""""""""""""""""""
" Minimal number of screen lines to keep above and below the cursor.
set scrolloff=7
" default off
"set scrolloff=0

"vim自身命令行模式只能补全(turn on command-line completion)
set wildmenu

"always show current position in status bar
set ruler

" show line number
set number
"highlight the search result
set hlsearch
" 开启实时搜索功能(show search result while inputting)
set incsearch
"搜索时忽略大小写(Ignore case in search patterns.)
set ignorecase
"When searching try to be smart about cases
set smartcase

"show matched bracket etc.
set showmatch

if has('gui_running')
    "disable cursor blink
    set guicursor=a:block-blinkon0
    "disable scorllbar 
    set guioptions-=l
    set guioptions-=L
    set guioptions-=r
    set guioptions-=R
    "disable menubar, toolbar
    set guioptions-=m
    set guioptions-=T 
endif

"always show status bar
set laststatus=2

if v:version >700 
    "highlight current line and column
    set cursorline
    set cursorcolumn
    highlight CursorLine   cterm=NONE ctermbg=black ctermfg=green guibg=NONE guifg=NONE
    highlight CursorColumn cterm=NONE ctermbg=black ctermfg=green guibg=NONE guifg=NONE
endif

"code fold
set foldmethod=syntax
set nofoldenable

""""""""""""""""""""""""""""""""""""""""""""
" Color and fonts
""""""""""""""""""""""""""""""""""""""""""""
" enable syntax highlighting
syntax enable
syntax on

"colorscheme desert
"set background=dark

" set utf8 as standard encoding and en_US as the standard lanuage
"设置编码
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set termencoding=utf8
set encoding=utf8


""""""""""""""""""""""""""""""""""""""""""""""""""
" Text, tab and indent related
""""""""""""""""""""""""""""""""""""""""""""""""

" Use space instead of tab
set expandtab
" Be smart when using tabs
set smarttab

" 1 tab=4 spaces
set shiftwidth=4
set tabstop=4
set softtabstop=4

"inherit indent of lastrow
set autoindent

"disable wrap
set nowrap

""""""""""""""""""
" others"
""""""""""""""""""


set t_Co=256
"colo molokai
" hilight function name
autocmd BufNewFile,BufRead * :syntax match cfunctions "\<[a-zA-Z_][a-zA-Z_0-9]*\>[^()]*)("me=e-2 
autocmd BufNewFile,BufRead * :syntax match cfunctions "\<[a-zA-Z_][a-zA-Z_0-9]*\>\s*("me=e-1
hi cfunctions ctermfg=81


" C/C++ 设置相关
set cindent
set mouse=a


" 插入模式下 Ctrl + E == ESC
"imap <C-e> <Esc>
set report=1

" 不能忽略大小下搜索
" set noic


"if filereadable("cscope.out")
nmap <leader>f :e cscope.files<CR> 
nmap <leader>s :scs find s <C-R>=expand("<cword>")<CR><CR>
nmap <leader>g :scs find g <C-R>=expand("<cword>")<CR><CR>
nmap <leader>c :scs find c <C-R>=expand("<cword>")<CR><CR>
nmap <leader>t :scs find t <C-R>=expand("<cword>")<CR><CR>
nmap <leader>e :scs find e <C-R>=expand("<cword>")<CR><CR>
"nmap <leader>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <leader>i :scs find i <C-R>=expand("<cfile>")<CR><CR>
nmap <leader>d :scs find d <C-R>=expand("<cword>")<CR><CR>

nmap <leader>co :copen<CR>
nmap <leader>cc :cclose<CR>

"endif


function! GetBufferList()
    redir =>buflist
    silent! ls
    redir END
    return buflist
endfunction

nmap <silent> <leader>c :call ToggleList("Quickfix List", 'bo c')<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""
"插件设置 
""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""
"""""" pathogen""""""     
" 管理插件                
execute pathogen#infect()   

"""""" ctags""""""
" 配置项目的tags文件路径
map <F4> :!ctags -R --c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v --fields=+liaS --extra=+q --language-force=c++ .<CR>
set tags+=./tags;,tags,/data/home/davidwwang/workspace/tencent_proj/dailymusic_proj/trunk/tags

""""""tagbar""""""
" 设置 tagbar 子窗口的位置出现在主编辑区的左边(default:right)
let tagbar_left=1
" 设置显示／隐藏标签列表子窗口的快捷键。速记：tag list
nnoremap <Leader>tl :TagbarToggle<CR>
" 设置ctag命令的路径
let g:tagbar_ctags_bin = 'ctags'
" 设置标签子窗口的宽度
let tagbar_width=32
" tagbar 子窗口中不显示冗余帮助信息
let g:tagbar_compact=1
" 设置 ctags 对哪些代码元素生成标签
let g:tagbar_type_cpp = {
    \ 'kinds' : [
        \ 'd:macros:1',
        \ 'g:enums',
        \ 't:typedefs:0:0',
        \ 'e:enumerators:0:0',
        \ 'n:namespaces',
        \ 'c:classes',
        \ 's:structs',
        \ 'u:unions',
        \ 'f:functions',
        \ 'm:members:0:0',
        \ 'v:global:0:0',
        \ 'x:external:0:0'
     \ ],
     \ 'sro'        : '::',
     \ 'kind2scope' : {
         \ 'g' : 'enum',
         \ 'n' : 'namespace',
         \ 'c' : 'class',
         \ 's' : 'struct',
         \ 'u' : 'union'
     \ },
     \ 'scope2kind' : {
         \ 'enum'      : 'g',
         \ 'namespace' : 'n',
         \ 'class'     : 'c',
         \ 'struct'    : 's',
         \ 'union'     : 'u'
     \ }
\ }


""""""CtrlP""""""
"ctrlp
"<Leader>p搜索当前目录下文件
let g:ctrlp_map = '<Leader>p'
let g:ctrlp_cmd = 'CtrlP'
"<Leader>f搜索MRU文件
nmap <Leader>f :CtrlPMRUFiles<CR>
"<Leader>b显示缓冲区文件，并可通过序号进行跳转
nmap <Leader>b :CtrlPBuffer<CR>
"设置搜索时忽略的文件
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(d|o|exe|so|dll|zip|tar|tar.gz|pyc)$',
    \ }
let g:ctrlp_working_path_mode = 0
let g:ctrlp_match_window_bottom = 1
"修改QuickFix窗口显示的最大条目数
let g:ctrlp_max_height = 15
let g:ctrlp_match_window_reversed = 0
"设置MRU最大条目数为500
let g:ctrlp_mruf_max = 500
let g:ctrlp_follow_symlinks = 1
"默认使用全路径搜索，置1后按文件名搜索，准确率会有所提高，可以用<C-d>进行切换
let g:ctrlp_by_filename = 1
"默认不使用正则表达式，置1改为默认使用正则表达式，可以用<C-r>进行切换
let g:ctrlp_regexp = 0
"自定义搜索列表的提示符
let g:ctrlp_line_prefix = '♪ '

""""""cscope""""""
map <F3> :!cscope -Rbq<CR>

set cscopequickfix=s-,c-,d-,i-,t-,e-
set nocscopeverbose
cs add /data/home/davidwwang/workspace/tencent_proj/dailymusic_proj/trunk/cscope.out /data/home/davidwwang/workspace/tencent_proj/dailymusic_proj/trunk/

"""""" nerdtree""""""
" 设置NERDTree快捷键
 map <leader>nt :NERDTreeToggle<CR>
"map <C-n> :NERDTreeToggle<CR>
"设置nerdtree在屏幕的右边显示(默认left)
let NERDTreeWinPos = "right"

" 显示行号
let NERDTreeShowLineNumbers=1
let NERDTreeAutoCenter=1
" 是否显示隐藏文件
let NERDTreeShowHidden=1
" 设置宽度
let NERDTreeWinSize=30
" 在终端启动vim时，共享NERDTree
let g:nerdtree_tabs_open_on_console_startup=1
" 忽略一下文件的显示
let NERDTreeIgnore=['\.pyc','\~$','\.swp', '\.d', '\.o']
" 显示书签列表
let NERDTreeShowBookmarks=1

" vim不指定具体文件打开是，自动使用nerdtree
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" 当vim打开一个目录时，nerdtree自动使用
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

" 当vim中没有其他文件，值剩下nerdtree的时候，自动关闭窗口
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" 改变nerdtree的箭头
let g:NERDTreeDirArrowExpandable = '+'
let g:NERDTreeDirArrowCollapsible = '-'
